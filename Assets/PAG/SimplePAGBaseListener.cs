//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SimplePAG.g4 by ANTLR 4.2.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ISimplePAGListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class SimplePAGBaseListener : ISimplePAGListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="SimplePAGParser.argumentsDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgumentsDefinition([NotNull] SimplePAGParser.ArgumentsDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimplePAGParser.argumentsDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgumentsDefinition([NotNull] SimplePAGParser.ArgumentsDefinitionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SimplePAGParser.cmdDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCmdDefinition([NotNull] SimplePAGParser.CmdDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimplePAGParser.cmdDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCmdDefinition([NotNull] SimplePAGParser.CmdDefinitionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SimplePAGParser.successor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSuccessor([NotNull] SimplePAGParser.SuccessorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimplePAGParser.successor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSuccessor([NotNull] SimplePAGParser.SuccessorContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SimplePAGParser.argumentDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgumentDefinition([NotNull] SimplePAGParser.ArgumentDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimplePAGParser.argumentDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgumentDefinition([NotNull] SimplePAGParser.ArgumentDefinitionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SimplePAGParser.pag"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPag([NotNull] SimplePAGParser.PagContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimplePAGParser.pag"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPag([NotNull] SimplePAGParser.PagContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SimplePAGParser.asset_uri"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAsset_uri([NotNull] SimplePAGParser.Asset_uriContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimplePAGParser.asset_uri"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAsset_uri([NotNull] SimplePAGParser.Asset_uriContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SimplePAGParser.shape_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterShape_name([NotNull] SimplePAGParser.Shape_nameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimplePAGParser.shape_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitShape_name([NotNull] SimplePAGParser.Shape_nameContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SimplePAGParser.rule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRule([NotNull] SimplePAGParser.RuleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimplePAGParser.rule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRule([NotNull] SimplePAGParser.RuleContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SimplePAGParser.rules"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRules([NotNull] SimplePAGParser.RulesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimplePAGParser.rules"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRules([NotNull] SimplePAGParser.RulesContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SimplePAGParser.floating_point"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFloating_point([NotNull] SimplePAGParser.Floating_pointContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimplePAGParser.floating_point"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFloating_point([NotNull] SimplePAGParser.Floating_pointContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
