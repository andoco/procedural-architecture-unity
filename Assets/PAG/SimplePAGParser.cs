//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SimplePAG.g4 by ANTLR 4.2.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class SimplePAGParser : Parser {
	public const int
		T__12=1, T__11=2, T__10=3, T__9=4, T__8=5, T__7=6, T__6=7, T__5=8, T__4=9, 
		T__3=10, T__2=11, T__1=12, T__0=13, INTEGER=14, ID=15, WS=16;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'#rules'", "':'", "'['", "';'", "'|'", "']'", "'()'", "'\"'", 
		"'('", "')'", "','", "'::-'", "'.'", "INTEGER", "ID", "WS"
	};
	public const int
		RULE_pag = 0, RULE_rules = 1, RULE_rule = 2, RULE_successor = 3, RULE_cmdDefinition = 4, 
		RULE_pushPopScope = 5, RULE_argumentsDefinition = 6, RULE_argumentDefinition = 7, 
		RULE_asset_uri = 8, RULE_shape_name = 9, RULE_floating_point = 10;
	public static readonly string[] ruleNames = {
		"pag", "rules", "rule", "successor", "cmdDefinition", "pushPopScope", 
		"argumentsDefinition", "argumentDefinition", "asset_uri", "shape_name", 
		"floating_point"
	};

	public override string GrammarFileName { get { return "SimplePAG.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SimplePAGParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class PagContext : ParserRuleContext {
		public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		public PagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_pag; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterPag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitPag(this);
		}
	}

	[RuleVersion(0)]
	public PagContext pag() {
		PagContext _localctx = new PagContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_pag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; Match(1);
			State = 23; rules();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		public RuleContext[] rule() {
			return GetRuleContexts<RuleContext>();
		}
		public RuleContext rule(int i) {
			return GetRuleContext<RuleContext>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_rules; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_rules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 25; rule();
				}
				}
				State = 28;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SimplePAGParser.ID, 0); }
		public Floating_pointContext[] floating_point() {
			return GetRuleContexts<Floating_pointContext>();
		}
		public SuccessorContext successor(int i) {
			return GetRuleContext<SuccessorContext>(i);
		}
		public SuccessorContext[] successor() {
			return GetRuleContexts<SuccessorContext>();
		}
		public Floating_pointContext floating_point(int i) {
			return GetRuleContext<Floating_pointContext>(i);
		}
		public RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_rule; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitRule(this);
		}
	}

	[RuleVersion(0)]
	public RuleContext rule() {
		RuleContext _localctx = new RuleContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; Match(ID);
			State = 31; Match(12);
			State = 32; successor();
			State = 35;
			_la = _input.La(1);
			if (_la==2) {
				{
				State = 33; Match(2);
				State = 34; floating_point();
				}
			}

			State = 45;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==5) {
				{
				{
				State = 37; Match(5);
				State = 38; successor();
				State = 41;
				_la = _input.La(1);
				if (_la==2) {
					{
					State = 39; Match(2);
					State = 40; floating_point();
					}
				}

				}
				}
				State = 47;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 48; Match(4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuccessorContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SimplePAGParser.ID, 0); }
		public CmdDefinitionContext cmdDefinition() {
			return GetRuleContext<CmdDefinitionContext>(0);
		}
		public SuccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_successor; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterSuccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitSuccessor(this);
		}
	}

	[RuleVersion(0)]
	public SuccessorContext successor() {
		SuccessorContext _localctx = new SuccessorContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_successor);
		try {
			State = 52;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50; cmdDefinition();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51; Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmdDefinitionContext : ParserRuleContext {
		public PushPopScopeContext pushPopScope() {
			return GetRuleContext<PushPopScopeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(SimplePAGParser.ID, 0); }
		public ArgumentsDefinitionContext argumentsDefinition() {
			return GetRuleContext<ArgumentsDefinitionContext>(0);
		}
		public CmdDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_cmdDefinition; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterCmdDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitCmdDefinition(this);
		}
	}

	[RuleVersion(0)]
	public CmdDefinitionContext cmdDefinition() {
		CmdDefinitionContext _localctx = new CmdDefinitionContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_cmdDefinition);
		try {
			State = 57;
			switch (_input.La(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54; Match(ID);
				State = 55; argumentsDefinition();
				}
				break;
			case 3:
			case 6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 56; pushPopScope();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PushPopScopeContext : ParserRuleContext {
		public PushPopScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_pushPopScope; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterPushPopScope(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitPushPopScope(this);
		}
	}

	[RuleVersion(0)]
	public PushPopScopeContext pushPopScope() {
		PushPopScopeContext _localctx = new PushPopScopeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_pushPopScope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			_la = _input.La(1);
			if ( !(_la==3 || _la==6) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsDefinitionContext : ParserRuleContext {
		public ArgumentDefinitionContext argumentDefinition(int i) {
			return GetRuleContext<ArgumentDefinitionContext>(i);
		}
		public ArgumentDefinitionContext[] argumentDefinition() {
			return GetRuleContexts<ArgumentDefinitionContext>();
		}
		public ArgumentsDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_argumentsDefinition; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterArgumentsDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitArgumentsDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsDefinitionContext argumentsDefinition() {
		ArgumentsDefinitionContext _localctx = new ArgumentsDefinitionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_argumentsDefinition);
		int _la;
		try {
			State = 73;
			switch (_input.La(1)) {
			case 9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 61; Match(9);
				State = 62; argumentDefinition();
				State = 67;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==11) {
					{
					{
					State = 63; Match(11);
					State = 64; argumentDefinition();
					}
					}
					State = 69;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 70; Match(10);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72; Match(7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentDefinitionContext : ParserRuleContext {
		public Shape_nameContext shape_name() {
			return GetRuleContext<Shape_nameContext>(0);
		}
		public ITerminalNode INTEGER() { return GetToken(SimplePAGParser.INTEGER, 0); }
		public Floating_pointContext floating_point() {
			return GetRuleContext<Floating_pointContext>(0);
		}
		public ArgumentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_argumentDefinition; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterArgumentDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitArgumentDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentDefinitionContext argumentDefinition() {
		ArgumentDefinitionContext _localctx = new ArgumentDefinitionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_argumentDefinition);
		try {
			State = 78;
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 75; floating_point();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 76; Match(INTEGER);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 77; shape_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asset_uriContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(SimplePAGParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(SimplePAGParser.ID, i);
		}
		public Asset_uriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_asset_uri; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterAsset_uri(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitAsset_uri(this);
		}
	}

	[RuleVersion(0)]
	public Asset_uriContext asset_uri() {
		Asset_uriContext _localctx = new Asset_uriContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_asset_uri);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(8);
			State = 81; Match(ID);
			State = 86;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==2) {
				{
				{
				State = 82; Match(2);
				State = 83; Match(ID);
				}
				}
				State = 88;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 89; Match(8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shape_nameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SimplePAGParser.ID, 0); }
		public Shape_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_shape_name; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterShape_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitShape_name(this);
		}
	}

	[RuleVersion(0)]
	public Shape_nameContext shape_name() {
		Shape_nameContext _localctx = new Shape_nameContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_shape_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(8);
			State = 92; Match(ID);
			State = 93; Match(8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Floating_pointContext : ParserRuleContext {
		public ITerminalNode[] INTEGER() { return GetTokens(SimplePAGParser.INTEGER); }
		public ITerminalNode INTEGER(int i) {
			return GetToken(SimplePAGParser.INTEGER, i);
		}
		public Floating_pointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_floating_point; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterFloating_point(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitFloating_point(this);
		}
	}

	[RuleVersion(0)]
	public Floating_pointContext floating_point() {
		Floating_pointContext _localctx = new Floating_pointContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_floating_point);
		int _la;
		try {
			State = 102;
			switch (_input.La(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95; Match(INTEGER);
				State = 98;
				_la = _input.La(1);
				if (_la==13) {
					{
					State = 96; Match(13);
					State = 97; Match(INTEGER);
					}
				}

				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 2);
				{
				State = 100; Match(13);
				State = 101; Match(INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x12k\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x3\x2\x3\x2\x3\x2\x3\x3\x6\x3\x1D\n\x3\r"+
		"\x3\xE\x3\x1E\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4&\n\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x5\x4,\n\x4\a\x4.\n\x4\f\x4\xE\x4\x31\v\x4\x3\x4\x3\x4\x3\x5"+
		"\x3\x5\x5\x5\x37\n\x5\x3\x6\x3\x6\x3\x6\x5\x6<\n\x6\x3\a\x3\a\x3\b\x3"+
		"\b\x3\b\x3\b\a\b\x44\n\b\f\b\xE\bG\v\b\x3\b\x3\b\x3\b\x5\bL\n\b\x3\t\x3"+
		"\t\x3\t\x5\tQ\n\t\x3\n\x3\n\x3\n\x3\n\a\nW\n\n\f\n\xE\nZ\v\n\x3\n\x3\n"+
		"\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x5\f\x65\n\f\x3\f\x3\f\x5\fi\n\f\x3"+
		"\f\x2\x2\x2\r\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14"+
		"\x2\x16\x2\x2\x3\x4\x2\x5\x5\b\bl\x2\x18\x3\x2\x2\x2\x4\x1C\x3\x2\x2\x2"+
		"\x6 \x3\x2\x2\x2\b\x36\x3\x2\x2\x2\n;\x3\x2\x2\x2\f=\x3\x2\x2\x2\xEK\x3"+
		"\x2\x2\x2\x10P\x3\x2\x2\x2\x12R\x3\x2\x2\x2\x14]\x3\x2\x2\x2\x16h\x3\x2"+
		"\x2\x2\x18\x19\a\x3\x2\x2\x19\x1A\x5\x4\x3\x2\x1A\x3\x3\x2\x2\x2\x1B\x1D"+
		"\x5\x6\x4\x2\x1C\x1B\x3\x2\x2\x2\x1D\x1E\x3\x2\x2\x2\x1E\x1C\x3\x2\x2"+
		"\x2\x1E\x1F\x3\x2\x2\x2\x1F\x5\x3\x2\x2\x2 !\a\x11\x2\x2!\"\a\xE\x2\x2"+
		"\"%\x5\b\x5\x2#$\a\x4\x2\x2$&\x5\x16\f\x2%#\x3\x2\x2\x2%&\x3\x2\x2\x2"+
		"&/\x3\x2\x2\x2\'(\a\a\x2\x2(+\x5\b\x5\x2)*\a\x4\x2\x2*,\x5\x16\f\x2+)"+
		"\x3\x2\x2\x2+,\x3\x2\x2\x2,.\x3\x2\x2\x2-\'\x3\x2\x2\x2.\x31\x3\x2\x2"+
		"\x2/-\x3\x2\x2\x2/\x30\x3\x2\x2\x2\x30\x32\x3\x2\x2\x2\x31/\x3\x2\x2\x2"+
		"\x32\x33\a\x6\x2\x2\x33\a\x3\x2\x2\x2\x34\x37\x5\n\x6\x2\x35\x37\a\x11"+
		"\x2\x2\x36\x34\x3\x2\x2\x2\x36\x35\x3\x2\x2\x2\x37\t\x3\x2\x2\x2\x38\x39"+
		"\a\x11\x2\x2\x39<\x5\xE\b\x2:<\x5\f\a\x2;\x38\x3\x2\x2\x2;:\x3\x2\x2\x2"+
		"<\v\x3\x2\x2\x2=>\t\x2\x2\x2>\r\x3\x2\x2\x2?@\a\v\x2\x2@\x45\x5\x10\t"+
		"\x2\x41\x42\a\r\x2\x2\x42\x44\x5\x10\t\x2\x43\x41\x3\x2\x2\x2\x44G\x3"+
		"\x2\x2\x2\x45\x43\x3\x2\x2\x2\x45\x46\x3\x2\x2\x2\x46H\x3\x2\x2\x2G\x45"+
		"\x3\x2\x2\x2HI\a\f\x2\x2IL\x3\x2\x2\x2JL\a\t\x2\x2K?\x3\x2\x2\x2KJ\x3"+
		"\x2\x2\x2L\xF\x3\x2\x2\x2MQ\x5\x16\f\x2NQ\a\x10\x2\x2OQ\x5\x14\v\x2PM"+
		"\x3\x2\x2\x2PN\x3\x2\x2\x2PO\x3\x2\x2\x2Q\x11\x3\x2\x2\x2RS\a\n\x2\x2"+
		"SX\a\x11\x2\x2TU\a\x4\x2\x2UW\a\x11\x2\x2VT\x3\x2\x2\x2WZ\x3\x2\x2\x2"+
		"XV\x3\x2\x2\x2XY\x3\x2\x2\x2Y[\x3\x2\x2\x2ZX\x3\x2\x2\x2[\\\a\n\x2\x2"+
		"\\\x13\x3\x2\x2\x2]^\a\n\x2\x2^_\a\x11\x2\x2_`\a\n\x2\x2`\x15\x3\x2\x2"+
		"\x2\x61\x64\a\x10\x2\x2\x62\x63\a\xF\x2\x2\x63\x65\a\x10\x2\x2\x64\x62"+
		"\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2\x65i\x3\x2\x2\x2\x66g\a\xF\x2\x2gi\a"+
		"\x10\x2\x2h\x61\x3\x2\x2\x2h\x66\x3\x2\x2\x2i\x17\x3\x2\x2\x2\xE\x1E%"+
		"+/\x36;\x45KPX\x64h";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
