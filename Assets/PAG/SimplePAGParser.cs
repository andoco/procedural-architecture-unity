//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SimplePAG.g4 by ANTLR 4.2.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class SimplePAGParser : Parser {
	public const int
		T__11=1, T__10=2, T__9=3, T__8=4, T__7=5, T__6=6, T__5=7, T__4=8, T__3=9, 
		T__2=10, T__1=11, T__0=12, INTEGER=13, ID=14, WS=15;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'#rules'", "'()'", "'\"'", "'('", "')'", "':'", "'['", "';'", 
		"','", "']'", "'::-'", "'.'", "INTEGER", "ID", "WS"
	};
	public const int
		RULE_pag = 0, RULE_rules = 1, RULE_rule = 2, RULE_successor = 3, RULE_cmdDefinition = 4, 
		RULE_pushPopScope = 5, RULE_argumentsDefinition = 6, RULE_argumentDefinition = 7, 
		RULE_asset_uri = 8, RULE_shape_name = 9, RULE_floating_point = 10;
	public static readonly string[] ruleNames = {
		"pag", "rules", "rule", "successor", "cmdDefinition", "pushPopScope", 
		"argumentsDefinition", "argumentDefinition", "asset_uri", "shape_name", 
		"floating_point"
	};

	public override string GrammarFileName { get { return "SimplePAG.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SimplePAGParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class PagContext : ParserRuleContext {
		public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		public PagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_pag; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterPag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitPag(this);
		}
	}

	[RuleVersion(0)]
	public PagContext pag() {
		PagContext _localctx = new PagContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_pag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; Match(1);
			State = 23; rules();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		public RuleContext[] rule() {
			return GetRuleContexts<RuleContext>();
		}
		public RuleContext rule(int i) {
			return GetRuleContext<RuleContext>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_rules; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_rules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 25; rule();
				}
				}
				State = 28;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SimplePAGParser.ID, 0); }
		public Floating_pointContext[] floating_point() {
			return GetRuleContexts<Floating_pointContext>();
		}
		public SuccessorContext successor(int i) {
			return GetRuleContext<SuccessorContext>(i);
		}
		public SuccessorContext[] successor() {
			return GetRuleContexts<SuccessorContext>();
		}
		public Floating_pointContext floating_point(int i) {
			return GetRuleContext<Floating_pointContext>(i);
		}
		public RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_rule; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitRule(this);
		}
	}

	[RuleVersion(0)]
	public RuleContext rule() {
		RuleContext _localctx = new RuleContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; Match(ID);
			State = 31; Match(11);
			State = 32; successor();
			State = 35;
			_la = _input.La(1);
			if (_la==6) {
				{
				State = 33; Match(6);
				State = 34; floating_point();
				}
			}

			State = 44;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 7) | (1L << 10) | (1L << ID))) != 0)) {
				{
				{
				State = 37; successor();
				State = 40;
				_la = _input.La(1);
				if (_la==6) {
					{
					State = 38; Match(6);
					State = 39; floating_point();
					}
				}

				}
				}
				State = 46;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 47; Match(8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuccessorContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SimplePAGParser.ID, 0); }
		public CmdDefinitionContext cmdDefinition() {
			return GetRuleContext<CmdDefinitionContext>(0);
		}
		public SuccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_successor; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterSuccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitSuccessor(this);
		}
	}

	[RuleVersion(0)]
	public SuccessorContext successor() {
		SuccessorContext _localctx = new SuccessorContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_successor);
		try {
			State = 51;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 49; cmdDefinition();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 50; Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmdDefinitionContext : ParserRuleContext {
		public PushPopScopeContext pushPopScope() {
			return GetRuleContext<PushPopScopeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(SimplePAGParser.ID, 0); }
		public ArgumentsDefinitionContext argumentsDefinition() {
			return GetRuleContext<ArgumentsDefinitionContext>(0);
		}
		public CmdDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_cmdDefinition; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterCmdDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitCmdDefinition(this);
		}
	}

	[RuleVersion(0)]
	public CmdDefinitionContext cmdDefinition() {
		CmdDefinitionContext _localctx = new CmdDefinitionContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_cmdDefinition);
		try {
			State = 56;
			switch (_input.La(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 53; Match(ID);
				State = 54; argumentsDefinition();
				}
				break;
			case 7:
			case 10:
				EnterOuterAlt(_localctx, 2);
				{
				State = 55; pushPopScope();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PushPopScopeContext : ParserRuleContext {
		public PushPopScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_pushPopScope; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterPushPopScope(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitPushPopScope(this);
		}
	}

	[RuleVersion(0)]
	public PushPopScopeContext pushPopScope() {
		PushPopScopeContext _localctx = new PushPopScopeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_pushPopScope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			_la = _input.La(1);
			if ( !(_la==7 || _la==10) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsDefinitionContext : ParserRuleContext {
		public ArgumentDefinitionContext argumentDefinition(int i) {
			return GetRuleContext<ArgumentDefinitionContext>(i);
		}
		public ArgumentDefinitionContext[] argumentDefinition() {
			return GetRuleContexts<ArgumentDefinitionContext>();
		}
		public ArgumentsDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_argumentsDefinition; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterArgumentsDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitArgumentsDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsDefinitionContext argumentsDefinition() {
		ArgumentsDefinitionContext _localctx = new ArgumentsDefinitionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_argumentsDefinition);
		int _la;
		try {
			State = 72;
			switch (_input.La(1)) {
			case 4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 60; Match(4);
				State = 61; argumentDefinition();
				State = 66;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==9) {
					{
					{
					State = 62; Match(9);
					State = 63; argumentDefinition();
					}
					}
					State = 68;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 69; Match(5);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71; Match(2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentDefinitionContext : ParserRuleContext {
		public Shape_nameContext shape_name() {
			return GetRuleContext<Shape_nameContext>(0);
		}
		public ITerminalNode INTEGER() { return GetToken(SimplePAGParser.INTEGER, 0); }
		public Floating_pointContext floating_point() {
			return GetRuleContext<Floating_pointContext>(0);
		}
		public ArgumentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_argumentDefinition; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterArgumentDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitArgumentDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentDefinitionContext argumentDefinition() {
		ArgumentDefinitionContext _localctx = new ArgumentDefinitionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_argumentDefinition);
		try {
			State = 77;
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 74; floating_point();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 75; Match(INTEGER);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 76; shape_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asset_uriContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(SimplePAGParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(SimplePAGParser.ID, i);
		}
		public Asset_uriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_asset_uri; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterAsset_uri(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitAsset_uri(this);
		}
	}

	[RuleVersion(0)]
	public Asset_uriContext asset_uri() {
		Asset_uriContext _localctx = new Asset_uriContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_asset_uri);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; Match(3);
			State = 80; Match(ID);
			State = 85;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==6) {
				{
				{
				State = 81; Match(6);
				State = 82; Match(ID);
				}
				}
				State = 87;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 88; Match(3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shape_nameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SimplePAGParser.ID, 0); }
		public Shape_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_shape_name; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterShape_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitShape_name(this);
		}
	}

	[RuleVersion(0)]
	public Shape_nameContext shape_name() {
		Shape_nameContext _localctx = new Shape_nameContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_shape_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; Match(3);
			State = 91; Match(ID);
			State = 92; Match(3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Floating_pointContext : ParserRuleContext {
		public ITerminalNode[] INTEGER() { return GetTokens(SimplePAGParser.INTEGER); }
		public ITerminalNode INTEGER(int i) {
			return GetToken(SimplePAGParser.INTEGER, i);
		}
		public Floating_pointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_floating_point; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterFloating_point(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitFloating_point(this);
		}
	}

	[RuleVersion(0)]
	public Floating_pointContext floating_point() {
		Floating_pointContext _localctx = new Floating_pointContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_floating_point);
		int _la;
		try {
			State = 101;
			switch (_input.La(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94; Match(INTEGER);
				State = 97;
				_la = _input.La(1);
				if (_la==12) {
					{
					State = 95; Match(12);
					State = 96; Match(INTEGER);
					}
				}

				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 2);
				{
				State = 99; Match(12);
				State = 100; Match(INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x11j\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x3\x2\x3\x2\x3\x2\x3\x3\x6\x3\x1D\n\x3\r"+
		"\x3\xE\x3\x1E\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4&\n\x4\x3\x4\x3\x4\x3"+
		"\x4\x5\x4+\n\x4\a\x4-\n\x4\f\x4\xE\x4\x30\v\x4\x3\x4\x3\x4\x3\x5\x3\x5"+
		"\x5\x5\x36\n\x5\x3\x6\x3\x6\x3\x6\x5\x6;\n\x6\x3\a\x3\a\x3\b\x3\b\x3\b"+
		"\x3\b\a\b\x43\n\b\f\b\xE\b\x46\v\b\x3\b\x3\b\x3\b\x5\bK\n\b\x3\t\x3\t"+
		"\x3\t\x5\tP\n\t\x3\n\x3\n\x3\n\x3\n\a\nV\n\n\f\n\xE\nY\v\n\x3\n\x3\n\x3"+
		"\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x5\f\x64\n\f\x3\f\x3\f\x5\fh\n\f\x3\f"+
		"\x2\x2\x2\r\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2"+
		"\x16\x2\x2\x3\x4\x2\t\t\f\fk\x2\x18\x3\x2\x2\x2\x4\x1C\x3\x2\x2\x2\x6"+
		" \x3\x2\x2\x2\b\x35\x3\x2\x2\x2\n:\x3\x2\x2\x2\f<\x3\x2\x2\x2\xEJ\x3\x2"+
		"\x2\x2\x10O\x3\x2\x2\x2\x12Q\x3\x2\x2\x2\x14\\\x3\x2\x2\x2\x16g\x3\x2"+
		"\x2\x2\x18\x19\a\x3\x2\x2\x19\x1A\x5\x4\x3\x2\x1A\x3\x3\x2\x2\x2\x1B\x1D"+
		"\x5\x6\x4\x2\x1C\x1B\x3\x2\x2\x2\x1D\x1E\x3\x2\x2\x2\x1E\x1C\x3\x2\x2"+
		"\x2\x1E\x1F\x3\x2\x2\x2\x1F\x5\x3\x2\x2\x2 !\a\x10\x2\x2!\"\a\r\x2\x2"+
		"\"%\x5\b\x5\x2#$\a\b\x2\x2$&\x5\x16\f\x2%#\x3\x2\x2\x2%&\x3\x2\x2\x2&"+
		".\x3\x2\x2\x2\'*\x5\b\x5\x2()\a\b\x2\x2)+\x5\x16\f\x2*(\x3\x2\x2\x2*+"+
		"\x3\x2\x2\x2+-\x3\x2\x2\x2,\'\x3\x2\x2\x2-\x30\x3\x2\x2\x2.,\x3\x2\x2"+
		"\x2./\x3\x2\x2\x2/\x31\x3\x2\x2\x2\x30.\x3\x2\x2\x2\x31\x32\a\n\x2\x2"+
		"\x32\a\x3\x2\x2\x2\x33\x36\x5\n\x6\x2\x34\x36\a\x10\x2\x2\x35\x33\x3\x2"+
		"\x2\x2\x35\x34\x3\x2\x2\x2\x36\t\x3\x2\x2\x2\x37\x38\a\x10\x2\x2\x38;"+
		"\x5\xE\b\x2\x39;\x5\f\a\x2:\x37\x3\x2\x2\x2:\x39\x3\x2\x2\x2;\v\x3\x2"+
		"\x2\x2<=\t\x2\x2\x2=\r\x3\x2\x2\x2>?\a\x6\x2\x2?\x44\x5\x10\t\x2@\x41"+
		"\a\v\x2\x2\x41\x43\x5\x10\t\x2\x42@\x3\x2\x2\x2\x43\x46\x3\x2\x2\x2\x44"+
		"\x42\x3\x2\x2\x2\x44\x45\x3\x2\x2\x2\x45G\x3\x2\x2\x2\x46\x44\x3\x2\x2"+
		"\x2GH\a\a\x2\x2HK\x3\x2\x2\x2IK\a\x4\x2\x2J>\x3\x2\x2\x2JI\x3\x2\x2\x2"+
		"K\xF\x3\x2\x2\x2LP\x5\x16\f\x2MP\a\xF\x2\x2NP\x5\x14\v\x2OL\x3\x2\x2\x2"+
		"OM\x3\x2\x2\x2ON\x3\x2\x2\x2P\x11\x3\x2\x2\x2QR\a\x5\x2\x2RW\a\x10\x2"+
		"\x2ST\a\b\x2\x2TV\a\x10\x2\x2US\x3\x2\x2\x2VY\x3\x2\x2\x2WU\x3\x2\x2\x2"+
		"WX\x3\x2\x2\x2XZ\x3\x2\x2\x2YW\x3\x2\x2\x2Z[\a\x5\x2\x2[\x13\x3\x2\x2"+
		"\x2\\]\a\x5\x2\x2]^\a\x10\x2\x2^_\a\x5\x2\x2_\x15\x3\x2\x2\x2`\x63\a\xF"+
		"\x2\x2\x61\x62\a\xE\x2\x2\x62\x64\a\xF\x2\x2\x63\x61\x3\x2\x2\x2\x63\x64"+
		"\x3\x2\x2\x2\x64h\x3\x2\x2\x2\x65\x66\a\xE\x2\x2\x66h\a\xF\x2\x2g`\x3"+
		"\x2\x2\x2g\x65\x3\x2\x2\x2h\x17\x3\x2\x2\x2\xE\x1E%*.\x35:\x44JOW\x63"+
		"g";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
