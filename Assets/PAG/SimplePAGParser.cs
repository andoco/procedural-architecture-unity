//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SimplePAG.g4 by ANTLR 4.2.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class SimplePAGParser : Parser {
	public const int
		T__10=1, T__9=2, T__8=3, T__7=4, T__6=5, T__5=6, T__4=7, T__3=8, T__2=9, 
		T__1=10, T__0=11, INTEGER=12, ID=13, WS=14;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'#rules'", "'()'", "'\"'", "'('", "')'", "':'", "';'", "','", 
		"'|'", "'::-'", "'.'", "INTEGER", "ID", "WS"
	};
	public const int
		RULE_pag = 0, RULE_rules = 1, RULE_rule = 2, RULE_successor = 3, RULE_cmdDefinition = 4, 
		RULE_argumentsDefinition = 5, RULE_argumentDefinition = 6, RULE_asset_uri = 7, 
		RULE_shape_name = 8, RULE_floating_point = 9;
	public static readonly string[] ruleNames = {
		"pag", "rules", "rule", "successor", "cmdDefinition", "argumentsDefinition", 
		"argumentDefinition", "asset_uri", "shape_name", "floating_point"
	};

	public override string GrammarFileName { get { return "SimplePAG.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SimplePAGParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class PagContext : ParserRuleContext {
		public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		public PagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_pag; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterPag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitPag(this);
		}
	}

	[RuleVersion(0)]
	public PagContext pag() {
		PagContext _localctx = new PagContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_pag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; Match(1);
			State = 21; rules();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		public RuleContext[] rule() {
			return GetRuleContexts<RuleContext>();
		}
		public RuleContext rule(int i) {
			return GetRuleContext<RuleContext>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_rules; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_rules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 23; rule();
				}
				}
				State = 26;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SimplePAGParser.ID, 0); }
		public Floating_pointContext[] floating_point() {
			return GetRuleContexts<Floating_pointContext>();
		}
		public SuccessorContext successor(int i) {
			return GetRuleContext<SuccessorContext>(i);
		}
		public SuccessorContext[] successor() {
			return GetRuleContexts<SuccessorContext>();
		}
		public Floating_pointContext floating_point(int i) {
			return GetRuleContext<Floating_pointContext>(i);
		}
		public RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_rule; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitRule(this);
		}
	}

	[RuleVersion(0)]
	public RuleContext rule() {
		RuleContext _localctx = new RuleContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; Match(ID);
			State = 29; Match(10);
			State = 30; successor();
			State = 33;
			_la = _input.La(1);
			if (_la==6) {
				{
				State = 31; Match(6);
				State = 32; floating_point();
				}
			}

			State = 43;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==9) {
				{
				{
				State = 35; Match(9);
				State = 36; successor();
				State = 39;
				_la = _input.La(1);
				if (_la==6) {
					{
					State = 37; Match(6);
					State = 38; floating_point();
					}
				}

				}
				}
				State = 45;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 46; Match(7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuccessorContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SimplePAGParser.ID, 0); }
		public CmdDefinitionContext cmdDefinition() {
			return GetRuleContext<CmdDefinitionContext>(0);
		}
		public SuccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_successor; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterSuccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitSuccessor(this);
		}
	}

	[RuleVersion(0)]
	public SuccessorContext successor() {
		SuccessorContext _localctx = new SuccessorContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_successor);
		try {
			State = 50;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48; cmdDefinition();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49; Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmdDefinitionContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SimplePAGParser.ID, 0); }
		public ArgumentsDefinitionContext argumentsDefinition() {
			return GetRuleContext<ArgumentsDefinitionContext>(0);
		}
		public CmdDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_cmdDefinition; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterCmdDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitCmdDefinition(this);
		}
	}

	[RuleVersion(0)]
	public CmdDefinitionContext cmdDefinition() {
		CmdDefinitionContext _localctx = new CmdDefinitionContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_cmdDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; Match(ID);
			State = 53; argumentsDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsDefinitionContext : ParserRuleContext {
		public ArgumentDefinitionContext argumentDefinition(int i) {
			return GetRuleContext<ArgumentDefinitionContext>(i);
		}
		public ArgumentDefinitionContext[] argumentDefinition() {
			return GetRuleContexts<ArgumentDefinitionContext>();
		}
		public ArgumentsDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_argumentsDefinition; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterArgumentsDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitArgumentsDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsDefinitionContext argumentsDefinition() {
		ArgumentsDefinitionContext _localctx = new ArgumentsDefinitionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_argumentsDefinition);
		int _la;
		try {
			State = 67;
			switch (_input.La(1)) {
			case 4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 55; Match(4);
				State = 56; argumentDefinition();
				State = 61;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==8) {
					{
					{
					State = 57; Match(8);
					State = 58; argumentDefinition();
					}
					}
					State = 63;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 64; Match(5);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 66; Match(2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentDefinitionContext : ParserRuleContext {
		public Shape_nameContext shape_name() {
			return GetRuleContext<Shape_nameContext>(0);
		}
		public ITerminalNode INTEGER() { return GetToken(SimplePAGParser.INTEGER, 0); }
		public Floating_pointContext floating_point() {
			return GetRuleContext<Floating_pointContext>(0);
		}
		public ArgumentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_argumentDefinition; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterArgumentDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitArgumentDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentDefinitionContext argumentDefinition() {
		ArgumentDefinitionContext _localctx = new ArgumentDefinitionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_argumentDefinition);
		try {
			State = 72;
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 69; floating_point();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 70; Match(INTEGER);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 71; shape_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asset_uriContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(SimplePAGParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(SimplePAGParser.ID, i);
		}
		public Asset_uriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_asset_uri; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterAsset_uri(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitAsset_uri(this);
		}
	}

	[RuleVersion(0)]
	public Asset_uriContext asset_uri() {
		Asset_uriContext _localctx = new Asset_uriContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_asset_uri);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(3);
			State = 75; Match(ID);
			State = 80;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==6) {
				{
				{
				State = 76; Match(6);
				State = 77; Match(ID);
				}
				}
				State = 82;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 83; Match(3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shape_nameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SimplePAGParser.ID, 0); }
		public Shape_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_shape_name; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterShape_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitShape_name(this);
		}
	}

	[RuleVersion(0)]
	public Shape_nameContext shape_name() {
		Shape_nameContext _localctx = new Shape_nameContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_shape_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(3);
			State = 86; Match(ID);
			State = 87; Match(3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Floating_pointContext : ParserRuleContext {
		public ITerminalNode[] INTEGER() { return GetTokens(SimplePAGParser.INTEGER); }
		public ITerminalNode INTEGER(int i) {
			return GetToken(SimplePAGParser.INTEGER, i);
		}
		public Floating_pointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_floating_point; }
		public override void EnterRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.EnterFloating_point(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimplePAGListener typedListener = listener as ISimplePAGListener;
			if (typedListener != null) typedListener.ExitFloating_point(this);
		}
	}

	[RuleVersion(0)]
	public Floating_pointContext floating_point() {
		Floating_pointContext _localctx = new Floating_pointContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_floating_point);
		int _la;
		try {
			State = 96;
			switch (_input.La(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 89; Match(INTEGER);
				State = 92;
				_la = _input.La(1);
				if (_la==11) {
					{
					State = 90; Match(11);
					State = 91; Match(INTEGER);
					}
				}

				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94; Match(11);
				State = 95; Match(INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x10\x65\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x3\x2\x3\x2\x3\x2\x3\x3\x6\x3\x1B\n\x3\r\x3\xE"+
		"\x3\x1C\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4$\n\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x5\x4*\n\x4\a\x4,\n\x4\f\x4\xE\x4/\v\x4\x3\x4\x3\x4\x3\x5\x3\x5\x5"+
		"\x5\x35\n\x5\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\a\a>\n\a\f\a\xE\a\x41"+
		"\v\a\x3\a\x3\a\x3\a\x5\a\x46\n\a\x3\b\x3\b\x3\b\x5\bK\n\b\x3\t\x3\t\x3"+
		"\t\x3\t\a\tQ\n\t\f\t\xE\tT\v\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v"+
		"\x3\v\x5\v_\n\v\x3\v\x3\v\x5\v\x63\n\v\x3\v\x2\x2\x2\f\x2\x2\x4\x2\x6"+
		"\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x2\x2\x66\x2\x16\x3\x2\x2"+
		"\x2\x4\x1A\x3\x2\x2\x2\x6\x1E\x3\x2\x2\x2\b\x34\x3\x2\x2\x2\n\x36\x3\x2"+
		"\x2\x2\f\x45\x3\x2\x2\x2\xEJ\x3\x2\x2\x2\x10L\x3\x2\x2\x2\x12W\x3\x2\x2"+
		"\x2\x14\x62\x3\x2\x2\x2\x16\x17\a\x3\x2\x2\x17\x18\x5\x4\x3\x2\x18\x3"+
		"\x3\x2\x2\x2\x19\x1B\x5\x6\x4\x2\x1A\x19\x3\x2\x2\x2\x1B\x1C\x3\x2\x2"+
		"\x2\x1C\x1A\x3\x2\x2\x2\x1C\x1D\x3\x2\x2\x2\x1D\x5\x3\x2\x2\x2\x1E\x1F"+
		"\a\xF\x2\x2\x1F \a\f\x2\x2 #\x5\b\x5\x2!\"\a\b\x2\x2\"$\x5\x14\v\x2#!"+
		"\x3\x2\x2\x2#$\x3\x2\x2\x2$-\x3\x2\x2\x2%&\a\v\x2\x2&)\x5\b\x5\x2\'(\a"+
		"\b\x2\x2(*\x5\x14\v\x2)\'\x3\x2\x2\x2)*\x3\x2\x2\x2*,\x3\x2\x2\x2+%\x3"+
		"\x2\x2\x2,/\x3\x2\x2\x2-+\x3\x2\x2\x2-.\x3\x2\x2\x2.\x30\x3\x2\x2\x2/"+
		"-\x3\x2\x2\x2\x30\x31\a\t\x2\x2\x31\a\x3\x2\x2\x2\x32\x35\x5\n\x6\x2\x33"+
		"\x35\a\xF\x2\x2\x34\x32\x3\x2\x2\x2\x34\x33\x3\x2\x2\x2\x35\t\x3\x2\x2"+
		"\x2\x36\x37\a\xF\x2\x2\x37\x38\x5\f\a\x2\x38\v\x3\x2\x2\x2\x39:\a\x6\x2"+
		"\x2:?\x5\xE\b\x2;<\a\n\x2\x2<>\x5\xE\b\x2=;\x3\x2\x2\x2>\x41\x3\x2\x2"+
		"\x2?=\x3\x2\x2\x2?@\x3\x2\x2\x2@\x42\x3\x2\x2\x2\x41?\x3\x2\x2\x2\x42"+
		"\x43\a\a\x2\x2\x43\x46\x3\x2\x2\x2\x44\x46\a\x4\x2\x2\x45\x39\x3\x2\x2"+
		"\x2\x45\x44\x3\x2\x2\x2\x46\r\x3\x2\x2\x2GK\x5\x14\v\x2HK\a\xE\x2\x2I"+
		"K\x5\x12\n\x2JG\x3\x2\x2\x2JH\x3\x2\x2\x2JI\x3\x2\x2\x2K\xF\x3\x2\x2\x2"+
		"LM\a\x5\x2\x2MR\a\xF\x2\x2NO\a\b\x2\x2OQ\a\xF\x2\x2PN\x3\x2\x2\x2QT\x3"+
		"\x2\x2\x2RP\x3\x2\x2\x2RS\x3\x2\x2\x2SU\x3\x2\x2\x2TR\x3\x2\x2\x2UV\a"+
		"\x5\x2\x2V\x11\x3\x2\x2\x2WX\a\x5\x2\x2XY\a\xF\x2\x2YZ\a\x5\x2\x2Z\x13"+
		"\x3\x2\x2\x2[^\a\xE\x2\x2\\]\a\r\x2\x2]_\a\xE\x2\x2^\\\x3\x2\x2\x2^_\x3"+
		"\x2\x2\x2_\x63\x3\x2\x2\x2`\x61\a\r\x2\x2\x61\x63\a\xE\x2\x2\x62[\x3\x2"+
		"\x2\x2\x62`\x3\x2\x2\x2\x63\x15\x3\x2\x2\x2\r\x1C#)-\x34?\x45JR^\x62";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
